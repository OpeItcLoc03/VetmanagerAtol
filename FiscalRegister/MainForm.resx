<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAKcGAACnBgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAA
        AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAA
        AAQAAAAEAAAABAAAAAQAAAAEAAAArwAAAK8AAACvAAAArwAAAK8AAACvAAAArwAAAK8AAACvAAAArwAA
        AK8AAACvAAAArwAAAK8AAACvAAAAsQAAALMAAACxAAAArwAAAK8AAACvAAAArwAAAK8AAACvAAAArwAA
        AK8AAACvAAAArwAAAK8AAACvAAAArwAAAK8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADfAAAAowAAANEAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6wAAAD8AAAAAAAAAJQAAANYAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADZAAAAFwAAAAAAAAAFAAAAuwAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPkAAAB+AAAAJgAA
        AGQAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APwAAAD+AAAA/wAAAP8AAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAA
        APgAAADlAAAA9AAAAP0AAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD/AAAA/wAA
        AP4AAAD8AAAAUQAAALgAAAD/AAAA6wAAAGcAAABRAAAAUgAAAFIAAABSAAAAUgAAAFIAAABSAAAAUgAA
        AFIAAABSAAAAUgAAAFQAAABTAAAAUgAAAFIAAABSAAAAUgAAAFIAAABSAAAAUgAAAFIAAABRAAAAZAAA
        AOYAAAD/AAAAvwAAAFMAAAAAAAAAlAAAAP8AAADgAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAWAAAA2gAAAP8AAACfAAAAAAAAAAAAAACWAAAA/wAAAOEAAAAfAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAHkAAAB9AAAAJQAAAKcAAAA3AAAAYgAA
        AJEAAAAJAAAAAAAAABoAAADaAAAA/wAAAKAAAAABAAAAAAAAAJYAAAD/AAAA4QAAAB8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAdAAAAHcAAAAjAAAAnwAA
        ADQAAABdAAAAigAAAAkAAAAAAAAAGgAAANoAAAD/AAAAoAAAAAEAAAAAAAAAlgAAAP8AAADhAAAAHwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAHgAA
        AAUAAAAqAAAACgAAABYAAAAjAAAAAAAAAAAAAAAaAAAA2gAAAP8AAACgAAAAAQAAAAAAAACWAAAA/wAA
        AOEAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AJ4AAACjAAAAMwAAANcAAABKAAAAgAAAALsAAAANAAAAAAAAABoAAADaAAAA/wAAAKAAAAABAAAAAAAA
        AJYAAAD/AAAA4AAAABsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAOwAAAD0AAAAOAAAAVAAAABcAAAAvAAAASAAAAAIAAAAAAAAAGgAAANoAAAD/AAAAoAAA
        AAEAAAAAAAAAlgAAAP8AAADrAAAAaQAAAFMAAABVAAAAVQAAAFUAAABVAAAAVQAAAFUAAABVAAAAVQAA
        AFYAAAAqAAAAAAAAAAcAAAAaAAAAHAAAAB4AAAAbAAAAHQAAABwAAAAcAAAAFwAAAAAAAAAaAAAA2gAA
        AP8AAACgAAAAAQAAAAAAAACWAAAA/wAAAP8AAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAA
        APwAAAD8AAAA/wAAAH4AAAACAAAAjAAAAOAAAADhAAAA4AAAAOAAAADgAAAA4AAAAOEAAADXAAAAVQAA
        ABgAAADaAAAA/wAAAKAAAAABAAAAAAAAAJYAAAD/AAAA/wAAANYAAABjAAAAWgAAAFoAAABaAAAAWgAA
        AFoAAABaAAAAXwAAAMcAAAD/AAAAfwAAAAwAAADJAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAACIAAAAGAAAANoAAAD/AAAAoAAAAAEAAAAAAAAAlgAAAP8AAAD/AAAAugAAABoAAABpAAAAcQAA
        AHEAAABxAAAAcgAAAGIAAAAKAAAAogAAAP8AAAB/AAAAAAAAAEAAAACHAAAAigAAAIoAAACKAAAAigAA
        AIoAAACLAAAAfAAAACAAAAAZAAAA2gAAAP8AAACgAAAAAQAAAAAAAACWAAAA/wAAAP8AAADUAAAAVAAA
        AO8AAAD/AAAA/wAAAP8AAAD/AAAA4QAAAD4AAADIAAAA/wAAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAADaAAAA/wAAAKAAAAABAAAAAAAAAJYAAAD/AAAA+gAA
        AM8AAABrAAAA6wAAAP8AAAD/AAAA/wAAAP8AAADdAAAAWgAAAMsAAADVAAAAaAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAANoAAAD/AAAAoAAAAAEAAAAAAAAAkgAA
        AP8AAAD0AAAApgAAAF4AAADsAAAA/wAAAP8AAAD/AAAA/wAAAN4AAABMAAAAnAAAAKIAAACXAAAAjAAA
        AI0AAACNAAAAjQAAAI0AAACNAAAAjQAAAI0AAACNAAAAjQAAAIwAAACYAAAA7wAAAP8AAACbAAAAAAAA
        AAAAAABdAAAA/AAAAP8AAAD5AAAAeQAAAOsAAAD/AAAA/wAAAP8AAAD/AAAA3AAAAGgAAAD7AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/AAA
        AGQAAAAAAAAAAAAAAAsAAACDAAAA3AAAAN4AAAByAAAA6wAAAP8AAAD/AAAA/wAAAP8AAADcAAAAYAAA
        AN8AAADvAAAA/wAAAP8AAADvAAAA5gAAAOcAAADnAAAA5wAAAOcAAADnAAAA5wAAAOcAAADuAAAA/wAA
        AP8AAACeAAAADAAAAAAAAAAAAAAAAAAAAAIAAAAcAAAAIwAAADwAAADuAAAA/wAAAP8AAAD/AAAA/wAA
        AN8AAAApAAAAIQAAAGsAAAD8AAAA/gAAAHMAAAAjAAAAJwAAACcAAAAnAAAAJwAAACcAAAAnAAAAIwAA
        AGgAAAD7AAAA/gAAAFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQAAAO8AAAD/AAAA/wAA
        AP8AAAD/AAAA4AAAAB4AAAAAAAAATwAAAPsAAAD+AAAAVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAASwAAAPsAAAD+AAAAXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAA7gAA
        AP8AAAD+AAAA/gAAAP8AAADfAAAAHgAAAAAAAABRAAAA+wAAAP4AAABmAAAADwAAABMAAAATAAAAEwAA
        ABMAAAATAAAAEwAAAA8AAABaAAAA+wAAAP4AAABdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABIAAABWAAAAXAAAAFwAAABcAAAAXQAAAFEAAAALAAAAAAAAAFEAAAD7AAAA/wAAAOEAAADQAAAA0QAA
        ANEAAADRAAAA0QAAANEAAADRAAAA0AAAAN8AAAD+AAAA/gAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUgAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAXgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3AAAArAAA
        AK8AAACvAAAArwAAAK8AAACvAAAArwAAAK8AAACvAAAArwAAAK8AAACvAAAArwAAAK4AAABAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/
        AAAD/wAAA/8AAAP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AAHwAAAB8AAAAfAAAAH/+AAB//gAAf/4AAE=
</value>
  </data>
</root>